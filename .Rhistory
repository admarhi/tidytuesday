knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(janitor)
#library(dplyr)
library(assertthat)
# Example 1
# samples <- c("B14",	"P27", "B9", "P20",	"B5",	"P16",	"B18",	"P19",	"P9",	"P23",	"B15",	"P30", "B2",	"P11",	"B3",	"P22")
# Example 2
samples <- c(1:841)
# Example 3
# samples <- c(1:20, 'B14', 35:60, 'P8', 'P21')
import_FAME <- function(FAME_raw) {
# Finds the date from the second sheet in the file
date <- suppressMessages(as.data.frame(read_xls(
FAME_raw, sheet = 2, skip = 5, n_max = 1, col_names = F,
col_types = c("skip", "skip", "skip", "skip", "skip", "skip","date")))[1,1])
# First sanity check. If something is wrong with the input file, this will return an error
assert_that(class(date)[1] == "POSIXct" || "POSIXt", msg = "Something went wrong, check input")
# modify date to be suitable as df name
name <- date %>% as.character() %>%
str_replace_all(" ", "_") %>%
str_replace_all(":", "-") %>%
paste("FAME_", ., sep = "")
# reads .xls and selects the relevant rows from the first sheet
suppressMessages(data_raw <- read_xls(FAME_raw, sheet = 1, skip = 10, n_max = 39, col_names = T))
message(name)
# finds the cutoff for files with additional data
if ("Area" %in% colnames(data_raw)) {
index <- match("Area", names(data_raw))
data_raw <- data_raw[-c(1,3),-c(index:ncol(data_raw))]
} else {
data_raw <- data_raw[-c(1,3),]
}
# cleans colnames
colnames(data_raw) <- c(1:ncol(data_raw))
# cleans and transposes the df
data_clean <- data_raw %>% tibble::rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from = 1, values_from = value) %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
rename(sample_nr = "first_injection") %>%
mutate("x1" = NULL,
across(everything(), na_if, "n.a."),
date_FAME = date, .after = "sample_nr") %>%
mutate_at(vars(3:ncol(.)), as.numeric)
# assigns name to df and saves it to the global environment
assign(name, data_clean, envir = .GlobalEnv)
return(data_clean)
}
cum_FAME_raw <- list.files(path = "/Users/admarhi/Documents/projects/R/FINGER/data_raw/FAME/FINGER_FAME", # select directory
pattern = "*.xls", # select all .xls files
full.names = TRUE) %>% # prepends the directory path
lapply(import_FAME) %>% # applies import_FAME()
bind_rows() # binds rows
head(cum_FAME_raw)
View(`FAME_2021-12-17_14-49-46`)
View(`FAME_2021-12-17_14-50-53`)
getwd()
setwd("/Users/admarhi/Documents/projects/R/")
getwd()
library(qqman)
vignette("qqman")
gwas_res = read.table("/Users/admarhi/Documents/archive/bs_agriculture/2 SS18/Bioinformatik/stud10/gwasErg3.assoc", header = TRUE)
manhattan(gwas_res)
manhattan(gwas_res, col=c("orange","red","yellow","cyan"))
manhattan(gwas_res, main = "Manhatten Plot",
ylim = c(0,10), cex = 0.6,
cex.axis = 0.9, col =rainbow(10),
suggestiveline = F, genomewideline = F)
x = subset(gwas_res, gwas_res$P < 0.1 & gwas_res$CHR == 1)
View(x)
snps=x$SNP[x$P<0.001]
snps
manhattan(gwas_res, highlight = snps)
manhattan(gwas_res, highlight = snps, col =rainbow(10),
suggestiveline = F, genomewideline = F)
manhattan(subset(gwas_res, CHR==1 & P<0.9), highlight = snps,
main = "Chr 1", col="red")
manhattan(gwas_res, annotatePval = 0.01, highlight = snps,
ylim = c(0, 10),
cex.axis = 0.9, col = rainbow(10),
suggestiveline = F, genomewideline = F)
gwas_res2=read.table("/Users/admarhi/Documents/archive/bs_agriculture/2 SS18/Bioinformatik/stud10/gwasSelber.assoc", header = TRUE)
manhattan(gwas_res2, main = "Manhatten Plot",
ylim = c(0,10), cex = 0.6,
cex.axis = 0.9, col = rainbow(10),
suggestiveline = F, genomewideline = F)
x=subset(gwas_res2, gwas_res2$P<0.1)
View(x)
snps=x$SNP[x$P<0.001]
snps
manhattan(gwas_res2, highlight = snps, col =rainbow(10),
suggestiveline = F, genomewideline = F)
#CHR1
manhattan(subset(gwas_res2, CHR==1 & P<0.9), highlight = snps,
main = "Chr 1", col="red")
#CHR2
manhattan(subset(gwas_res2, CHR==2 & P<0.9), highlight = snps,
main = "Chr 2", col="red")
#CHR3
manhattan(subset(gwas_res2, CHR==3 & P<0.9), highlight = snps,
main = "Chr 1", col="red")
#CHR4
manhattan(subset(gwas_res2, CHR==4 & P<0.9), highlight = snps,
main = "Chr 1", col="red")
#CHR5
manhattan(subset(gwas_res2, CHR==5 & P<0.9), highlight = snps,
main = "Chr 5", col="red")
manhattan(gwas_res2, annotatePval = 0.01, highlight = snps,
ylim = c(0, 10),
cex.axis = 0.9, col = rainbow(10),
suggestiveline = F, genomewideline = F)
setwd("/Users/admarhi/Documents/projects/R/tidytuesday/")
install.packages("tidytuesdayR")
library(tidytuesdayR)
rm(list = ls())
data <- tt_load("2022-09-20")
View(data)
rm(data)
tt_data <- tt_load("2022-09-20")
readme(tt_data)
HydroWASTE_v10 <- tt_data$HydroWASTE_v10
View(HydroWASTE_v10)
library(ggplot2)
library(dplyr)
library(tidyr)
p  <- ggplot(data = HydroWASTE_v10, aes(x = WASTE_DIS, y = QUAL_WASTE))
p + geom_point()
p  <- ggplot(data = HydroWASTE_v10, aes(x = WASTE_DIS, y = POP_SERVED))
p + geom_point()
p + geom_boxplot()
colnames(HydroWASTE_v10)
HydroWASTE_v10 <- HydroWASTE_v10 %>%
mutate(Waste_per_capita = WASTE_DIS / POP_SERVED)
HydroWASTE_v10$Waste_per_capita
max(HydroWASTE_v10$Waste_per_capita)
max(HydroWASTE_v10$Waste_per_capita, na.rm = T)
class(HydroWASTE_v10$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
do.call(HydroWASTE_v10,lapply(DT, function(x) replace(x, is.infinite(x),NA)))
do.call(data.frame,lapply(HydroWASTE_v10, function(x) replace(x, is.infinite(x),NA)))
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
HW <- do.call(data.frame,lapply(HydroWASTE_v10, function(x) replace(x, is.infinite(x),NA)))
max(HW$Waste_per_capita, na.rm = T)
class(HW$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
p  <- ggplot(data = HW, aes(x = WASTE_DIS, y = POP_SERVED))
p + geom_point()
is.infinite(HW$Waste_per_capita)
help(find)
filter(is.infinite(HW$Waste_per_capita), TRUE)
HW <- do.call(data.frame,lapply(HydroWASTE_v10, function(x) replace(x, is.infinite(x),NA)))
max(HW$Waste_per_capita, na.rm = T)
class(HW$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
p  <- ggplot(data = HW, aes(x = WASTE_DIS, y = POP_SERVED))
colnames(HydroWASTE_v10)
p  <- ggplot(data = HW, aes(x = COUNTRY, y = Waste_per_capita))
p + geom_point()
HW$COUNTRY[HW$Waste_per_capita == 2000]
HW[841:846,]
HW$COUNTRY[HW$COUNTRY == "South Africa"]
HW <- HydroWASTE_v10 %>%
mutate(Waste_per_capita = WASTE_DIS / POP_SERVED, na.rm = T)
glimpse(HW)
HW <- HydroWASTE_v10 %>%
mutate(Waste_per_capita = WASTE_DIS / POP_SERVED)
glimpse(HW)
max(HW$Waste_per_capita, na.rm = T)
HW <- do.call(data.frame,lapply(HW, function(x) replace(x, is.infinite(x),NA)))
max(HW$Waste_per_capita, na.rm = T)
class(HW$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
mean(HydroWASTE_v10$Waste_per_capita)
count(is.infinite(HW$Waste_per_capita))
list <- is.infinite(HW$Waste_per_capita)
count(list)
unique(list)
min(HW$Waste_per_capita)
min(HW$Waste_per_capita, na.rm = T)
class(HW$Waste_per_capita)
HW <- do.call(data.frame,lapply(HW$Waste_per_capita, function(x) replace(x, 0, NA)))
class(HW$Waste_per_capita)
HW <- HydroWASTE_v10 %>%
mutate(Waste_per_capita = WASTE_DIS / POP_SERVED)
glimpse(HW)
HW <- do.call(data.frame,lapply(HW, function(x) replace(x, is.infinite(x),NA)))
max(HW$Waste_per_capita, na.rm = T)
min(HW$Waste_per_capita, na.rm = T)
HW_2 <- do.call(data.frame,lapply(HW$Waste_per_capita, function(x) replace(x, 0, NA)))
HW_2 <- do.call(data.frame,lapply(HW$Waste_per_capita, replace(0, NA)))
HW$Waste_per_capita[HW$Waste_per_capita == 0] <- NA
class(HW$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
HW$Waste_per_capita
min(HW$Waste_per_capita, na.rm = T)
readme(tt_data)
HW <- HydroWASTE_v10 %>%
mutate(Waste_per_capita = WASTE_DIS / POP_SERVED * 1000 * 365) # litres/annum
glimpse(HW)
HW <- HydroWASTE_v10 %>%
mutate(Waste_per_capita = WASTE_DIS / POP_SERVED * 1000) # litres/annum
glimpse(HW)
max(HW$Waste_per_capita, na.rm = T)
HW <- do.call(data.frame,lapply(HW, function(x) replace(x, is.infinite(x),NA)))
max(HW$Waste_per_capita, na.rm = T)
min(HW$Waste_per_capita, na.rm = T)
HW$Waste_per_capita[HW$Waste_per_capita == 0] <- NA
class(HW$Waste_per_capita)
mean(HydroWASTE_v10$Waste_per_capita, na.rm = T)
colnames(HydroWASTE_v10)
max(HW$WASTE_DIS)
HW$COUNTRY[HW$WASTE_DIS == max(HW$WASTE_DIS)]
max(HW$Waste_per_capita, na.rm = T)
HW$COUNTRY[HW$POP_SERVED == min(HW$POP_SERVED)]
min(HW$POP_SERVED)
HW$Waste_per_capita[HW$Waste_per_capita == 0]
HW$Waste_per_capita[HW$Waste_per_capita == 0]
HW$COUNTRY[HW$WASTE_DIS == min(HW$WASTE_DIS)]
HW$WASTE_DIS[HW$WASTE_DIS == min(HW$WASTE_DIS)]
HW$POP_SERVED[HW$POP_SERVED == min(HW$POP_SERVED)]
HW <- replace(HW, 0, NA)
getwd()
